import os
import time
import urllib.request
import sys
import subprocess


OLD_GUAVA = "guava-14.0.1.jar"
jars_dir = os.path.join(sys.prefix, "Lib", "site-packages", "pyspark", "jars")
jar_urls = {
    "hadoop-aws-3.2.1.jar": "https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.2.1/hadoop-aws-3.2.1.jar",
    "aws-java-sdk-bundle-1.11.1026.jar": "https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.11.1026/aws-java-sdk-bundle-1.11.1026.jar",
    "guava-27.0-jre.jar": "https://repo1.maven.org/maven2/com/google/guava/guava/27.0-jre/guava-27.0-jre.jar",
    "hadoop-common-3.2.1.jar": "https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-common/3.2.1/hadoop-common-3.2.1.jar",
    "hadoop-client-3.2.1.jar": "https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-client/3.2.1/hadoop-client-3.2.1.jar"
}
HADOOP_VERSION = "3.3.6"
HADOOP_HOME_DEFAULT = os.path.join(os.getcwd(), f"hadoop-{HADOOP_VERSION}")
WINUTILS_URL = f"https://github.com/cdarlint/winutils/tree/master/hadoop-3.3.6/bin/winutils.exe"

def check_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng hi·ªán t·∫°i"""
    print("üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng:")
    print(f"- H·ªá ƒëi·ªÅu h√†nh: {os.name}")  # 'posix' cho Linux, 'nt' cho Windows
    print(f"- Th∆∞ m·ª•c hi·ªán t·∫°i: {os.getcwd()}")
    
    hadoop_home = os.environ.get("HADOOP_HOME")
    if hadoop_home and os.path.exists(hadoop_home):
        print(f"‚úÖ HADOOP_HOME hi·ªán t·∫°i: {hadoop_home}")
    else:
        print(f"‚ö†Ô∏è HADOOP_HOME ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        
def is_hadoop_installed():
    """Ki·ªÉm tra xem Hadoop ƒë√£ ƒë∆∞·ª£c c√†i tr√™n Windows ch∆∞a"""
    try:
        result = subprocess.run(["where", "hadoop"], capture_output=True, text=True, shell=True)
        return result.returncode == 0
    except Exception:
        return False


def setup_hadoop_home():
    """Thi·∫øt l·∫≠p HADOOP_HOME v√† t·∫£i winutils.exe n·∫øu c·∫ßn"""
    if os.name != "nt":  # Kh√¥ng c·∫ßn thi·∫øt l·∫≠p tr√™n Linux
        print("Kh√¥ng c·∫ßn thi·∫øt l·∫≠p HADOOP_HOME tr√™n h·ªá ƒëi·ªÅu h√†nh kh√¥ng ph·∫£i Windows.")
        return

    # Ki·ªÉm tra n·∫øu Hadoop ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t tr∆∞·ªõc ƒë√≥
    if is_hadoop_installed():
        print("‚úÖ ƒê√£ ph√°t hi·ªán Hadoop ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n h·ªá th·ªëng.")
        return

    hadoop_home = os.environ.get("HADOOP_HOME")
    if hadoop_home and os.path.exists(os.path.join(hadoop_home, "bin", "winutils.exe")):
        print(f"‚úÖ HADOOP_HOME ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p t·∫°i: {hadoop_home}")
        return

    # Thi·∫øt l·∫≠p HADOOP_HOME m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
    print(f"‚ö†Ô∏è HADOOP_HOME ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh t·∫°i: {HADOOP_HOME_DEFAULT}")
    os.makedirs(HADOOP_HOME_DEFAULT, exist_ok=True)
    bin_dir = os.path.join(HADOOP_HOME_DEFAULT, "bin")
    os.makedirs(bin_dir, exist_ok=True)

    # T·∫£i winutils.exe
    winutils_path = os.path.join(bin_dir, "winutils.exe")
    if not os.path.exists(winutils_path):
        print(f"üì• T·∫£i winutils.exe cho Hadoop {HADOOP_VERSION}...")
        urllib.request.urlretrieve(WINUTILS_URL, winutils_path)
        print(f"‚úÖ ƒê√£ t·∫£i winutils.exe v√†o {winutils_path}")
    else:
        print(f"‚úÖ winutils.exe ƒë√£ t·ªìn t·∫°i t·∫°i {winutils_path}")

    # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng trong session hi·ªán t·∫°i
    os.environ["HADOOP_HOME"] = HADOOP_HOME_DEFAULT
    os.environ["PATH"] = f"{HADOOP_HOME_DEFAULT}\\bin;{os.environ['PATH']}"
    
    # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng vƒ©nh vi·ªÖn trong Windows
    subprocess.run(["setx", "HADOOP_HOME", HADOOP_HOME_DEFAULT], shell=True)
    subprocess.run(["setx", "PATH", f"{HADOOP_HOME_DEFAULT}\\bin;%PATH%"], shell=True)

    print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p HADOOP_HOME vƒ©nh vi·ªÖn = {HADOOP_HOME_DEFAULT}")
    print(f"‚ö†Ô∏è B·∫°n c·∫ßn **kh·ªüi ƒë·ªông l·∫°i terminal** ƒë·ªÉ bi·∫øn m√¥i tr∆∞·ªùng c√≥ hi·ªáu l·ª±c!")
    
def remove_old_guava(jars_dir):
    old_guava_path = os.path.join(jars_dir, OLD_GUAVA)
    if os.path.exists(old_guava_path):
        print(f"Found {OLD_GUAVA}, removing it...")
        os.remove(old_guava_path)
        if not os.path.exists(old_guava_path):
            print(f"Successfully removed {OLD_GUAVA}.")
        else:
            print(f"Failed to remove {OLD_GUAVA}.")
            sys.exit(1)
    else:
        print(f"{OLD_GUAVA} not found in {jars_dir}.")


def download_jars(jars_dir):
    os.makedirs(jars_dir, exist_ok=True)
    for jar_name, url in jar_urls.items():
        jar_path = os.path.join(jars_dir, jar_name)
        if not os.path.exists(jar_path):
            print(f"Downloading {jar_name}...")
            urllib.request.urlretrieve(url, jar_path)
            print(f"Downloaded {jar_name} to {jar_path}")
        else:
            print(f"{jar_name} already exists at {jar_path}")
        
        time.sleep(1)

if __name__ == "__main__":
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    check_environment()
    
    # Thi·∫øt l·∫≠p HADOOP_HOME v√† winutils.exe
    setup_hadoop_home()
    
    # X√≥a guava c≈© v√† t·∫£i c√°c JAR
    remove_old_guava(jars_dir)
    download_jars(jars_dir)
    
    # X√°c nh·∫≠n l·∫°i m√¥i tr∆∞·ªùng sau khi thi·∫øt l·∫≠p
    print("\nX√°c nh·∫≠n m√¥i tr∆∞·ªùng sau khi thi·∫øt l·∫≠p:")
    check_environment()